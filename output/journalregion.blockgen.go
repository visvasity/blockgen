// Code generated by github.com/visvasity/blockgen. DO NOT EDIT.

package output

import (
	"fmt"
	"github.com/visvasity/blockgen/blockgen"
	"strings"
)

// Reader type defines accessor methods for read-only access.
type JournalRegion blockgen.BlockBytes

// Writer type extends the reader with mutable methods.
type JournalRegionWriter struct{ JournalRegion }

// BlockBytes returns access to the underlying byte slice.
func (v JournalRegion) BlockBytes() blockgen.BlockBytes {
	return blockgen.BlockBytes(v)
}

// Writer returns the JournalRegion writer for read-write access to it's fields.
func (v JournalRegion) Writer() JournalRegionWriter {
	return JournalRegionWriter{v}
}

// Reader returns the JournalRegion reader with read-only access to it's fields.
func (v JournalRegionWriter) Reader() JournalRegion {
	return v.JournalRegion
}

func (v JournalRegion) IsZero() bool {
	return blockgen.IsZero(v[:24])
}

func (v JournalRegionWriter) SetZero() {
	blockgen.SetZero(v.BlockBytes()[:24])
}

func (v JournalRegion) String() string {
	var sb strings.Builder
	fmt.Fprintf(&sb, "JournalOffset=%d", v.JournalOffset())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "FileOffset=%d", v.FileOffset())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "RegionSize=%d", v.RegionSize())
	return sb.String()
}

func (v JournalRegion) JournalOffset() int64 {
	return v.BlockBytes().Int64At(0)
}

func (v JournalRegionWriter) SetJournalOffset(x int64) {
	v.BlockBytes().SetInt64At(0, x)
}

func (v JournalRegion) FileOffset() int64 {
	return v.BlockBytes().Int64At(8)
}

func (v JournalRegionWriter) SetFileOffset(x int64) {
	v.BlockBytes().SetInt64At(8, x)
}

func (v JournalRegion) RegionSize() int64 {
	return v.BlockBytes().Int64At(16)
}

func (v JournalRegionWriter) SetRegionSize(x int64) {
	v.BlockBytes().SetInt64At(16, x)
}
