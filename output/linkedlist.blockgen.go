// Code generated by github.com/visvasity/blockgen. DO NOT EDIT.

package output

import (
	"fmt"
	"github.com/visvasity/blockgen/blockgen"
	"strings"
)

// Reader type defines accessor methods for read-only access.
type LinkedList blockgen.BlockBytes

// Writer type extends the reader with mutable methods.
type LinkedListWriter struct{ LinkedList }

// BlockBytes returns access to the underlying byte slice.
func (v LinkedList) BlockBytes() blockgen.BlockBytes {
	return blockgen.BlockBytes(v)
}

// Writer returns the LinkedList writer for read-write access to it's fields.
func (v LinkedList) Writer() LinkedListWriter {
	return LinkedListWriter{v}
}

// Reader returns the LinkedList reader with read-only access to it's fields.
func (v LinkedListWriter) Reader() LinkedList {
	return v.LinkedList
}

func (v LinkedList) IsZero() bool {
	return blockgen.IsZero(v[:24])
}

func (v LinkedListWriter) SetZero() {
	blockgen.SetZero(v.BlockBytes()[:24])
}

func (v LinkedList) String() string {
	var sb strings.Builder
	fmt.Fprintf(&sb, "HeadDBA=%d", v.HeadDBA())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "NumValues=%d", v.NumValues())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "NumLinkBlocks=%d", v.NumLinkBlocks())
	fmt.Fprintf(&sb, " ")
	fmt.Fprintf(&sb, "NumFreeItems=%d", v.NumFreeItems())
	return sb.String()
}

func (v LinkedList) HeadDBA() DBA {
	return DBA(v.BlockBytes().Uint64At(0))
}

func (v LinkedListWriter) SetHeadDBA(x DBA) {
	v.BlockBytes().SetUint64At(0, uint64(x))
}

func (v LinkedList) NumValues() int64 {
	return v.BlockBytes().Int64At(8)
}

func (v LinkedListWriter) SetNumValues(x int64) {
	v.BlockBytes().SetInt64At(8, x)
}

func (v LinkedList) NumLinkBlocks() int32 {
	return v.BlockBytes().Int32At(16)
}

func (v LinkedListWriter) SetNumLinkBlocks(x int32) {
	v.BlockBytes().SetInt32At(16, x)
}

func (v LinkedList) NumFreeItems() int32 {
	return v.BlockBytes().Int32At(20)
}

func (v LinkedListWriter) SetNumFreeItems(x int32) {
	v.BlockBytes().SetInt32At(20, x)
}
